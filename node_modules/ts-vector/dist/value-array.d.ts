export default class ValueArray<T> extends Array<T> {
    first: T;
    last: T;
    head(n?: number): this;
    tail(n?: number): this;
    range(start?: number, end?: number, step?: number): this;
    permute(indexes: ArrayLike<number>): this;
    shuffle(): this;
    transform(callback: (item: T, index: number, array: this) => T): this;
    each(callback: (item: T, index: number, array: this) => void): this;
    fillBy(fn: (index: number, array: this) => T): this;
    padStart(length: number, value?: T): this;
    padEnd(length: number, value?: T): this;
    equals(a: ArrayLike<T>): boolean;
    copy(): this;
    toSet(): Set<T>;
    unique(): this;
    counts(): Map<T, number>;
    count(param: T): number;
    count(param: (item: T, index: number, array: this) => boolean): number;
}
