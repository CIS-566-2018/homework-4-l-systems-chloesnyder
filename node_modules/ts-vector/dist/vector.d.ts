import ValueArray from './value-array';
import { Histogram, HistogramOptions } from './vector/histogram';
import { NumberArrayStats } from './vector/stats';
export default class Vector extends ValueArray<number> {
    min(): number;
    max(): number;
    extent(): [number, number];
    mean(): number;
    variance(): number;
    std(): number;
    mad(): number;
    mode(): number;
    argmin(): number;
    argmax(): number;
    median(): number;
    quantiles(q: number): this;
    histogram(options?: HistogramOptions): Histogram<this>;
    normalizeStats(): this;
    normalizeProba(): this;
    normalizeVector(): this;
    stats(): NumberArrayStats;
    sum(): number;
    sumOfSquares(): number;
    magnitude(): number;
    product(): number;
    cumsum(): this;
    diff(): this;
    sort(): this;
    sortDesc(): this;
    some(callback?: (value: number, index: number, array: this) => boolean): boolean;
    every(callback?: (value: number, index: number, array: this) => boolean): boolean;
    add(param: number): this;
    add(param: ArrayLike<number>): this;
    addSelf(param: number): this;
    addSelf(param: ArrayLike<number>): this;
    subtract(param: number): this;
    subtract(param: ArrayLike<number>): this;
    subtractSelf(param: number): this;
    subtractSelf(param: ArrayLike<number>): this;
    multiply(param: number): this;
    multiply(param: ArrayLike<number>): this;
    multiplySelf(param: number): this;
    multiplySelf(param: ArrayLike<number>): this;
    divide(param: number): this;
    divide(param: ArrayLike<number>): this;
    divideSelf(param: number): this;
    divideSelf(param: ArrayLike<number>): this;
    pow(param: number): this;
    pow(param: ArrayLike<number>): this;
    powSelf(param: number): this;
    powSelf(param: ArrayLike<number>): this;
    and(v: ArrayLike<number>): this;
    or(v: ArrayLike<number>): this;
    lessThan(param: number): this;
    lessThan(param: ArrayLike<number>): this;
    moreThan(param: number): this;
    moreThan(param: ArrayLike<number>): this;
    lessOrEqualThan(param: number): this;
    lessOrEqualThan(param: ArrayLike<number>): this;
    moreOrEqualThan(param: number): this;
    moreOrEqualThan(param: ArrayLike<number>): this;
    equal(param: number): this;
    equal(param: ArrayLike<number>): this;
    notEqual(param: number): this;
    notEqual(param: ArrayLike<number>): this;
    dot(v: ArrayLike<number>): number;
    static add(v1: number, v2: number): number;
    static add(v1: number, v2: ArrayLike<number>): Vector;
    static add(v1: ArrayLike<number>, v2: number): Vector;
    static add(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static subtract(v1: number, v2: number): number;
    static subtract(v1: number, v2: ArrayLike<number>): Vector;
    static subtract(v1: ArrayLike<number>, v2: number): Vector;
    static subtract(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static multiply(v1: number, v2: number): number;
    static multiply(v1: number, v2: ArrayLike<number>): Vector;
    static multiply(v1: ArrayLike<number>, v2: number): Vector;
    static multiply(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static divide(v1: number, v2: number): number;
    static divide(v1: number, v2: ArrayLike<number>): Vector;
    static divide(v1: ArrayLike<number>, v2: number): Vector;
    static divide(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static pow(v1: number, v2: number): number;
    static pow(v1: number, v2: ArrayLike<number>): Vector;
    static pow(v1: ArrayLike<number>, v2: number): Vector;
    static pow(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static and(v1: number, v2: number): number;
    static and(v1: number, v2: ArrayLike<number>): Vector;
    static and(v1: ArrayLike<number>, v2: number): Vector;
    static and(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static or(v1: number, v2: number): number;
    static or(v1: number, v2: ArrayLike<number>): Vector;
    static or(v1: ArrayLike<number>, v2: number): Vector;
    static or(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static lessThan(v1: number, v2: number): number;
    static lessThan(v1: number, v2: ArrayLike<number>): Vector;
    static lessThan(v1: ArrayLike<number>, v2: number): Vector;
    static lessThan(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static moreThan(v1: number, v2: number): number;
    static moreThan(v1: number, v2: ArrayLike<number>): Vector;
    static moreThan(v1: ArrayLike<number>, v2: number): Vector;
    static moreThan(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static lessOrEqualThan(v1: number, v2: number): number;
    static lessOrEqualThan(v1: number, v2: ArrayLike<number>): Vector;
    static lessOrEqualThan(v1: ArrayLike<number>, v2: number): Vector;
    static lessOrEqualThan(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static moreOrEqualThan(v1: number, v2: number): number;
    static moreOrEqualThan(v1: number, v2: ArrayLike<number>): Vector;
    static moreOrEqualThan(v1: ArrayLike<number>, v2: number): Vector;
    static moreOrEqualThan(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static equal(v1: number, v2: number): number;
    static equal(v1: number, v2: ArrayLike<number>): Vector;
    static equal(v1: ArrayLike<number>, v2: number): Vector;
    static equal(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static notEqual(v1: number, v2: number): number;
    static notEqual(v1: number, v2: ArrayLike<number>): Vector;
    static notEqual(v1: ArrayLike<number>, v2: number): Vector;
    static notEqual(v1: ArrayLike<number>, v2: ArrayLike<number>): Vector;
    static range(start: number, stop?: number, step?: number): Vector;
    static linspace(start: number, stop: number, num?: number, excludeEnd?: boolean): Vector;
    static logspace(start: number, stop: number, num?: number, excludeEnd?: boolean, base?: number): Vector;
}
